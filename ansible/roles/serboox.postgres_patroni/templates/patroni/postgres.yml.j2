name: {{ inventory_hostname }}
scope: {{ patroni_scope }}

consul:
  host: 127.0.0.1:{{ consul_http_port }}

restapi:
  listen: {{ patroni_host }}:{{ patroni_port }}
  connect_address: {{ ansible_default_ipv4.address }}:{{ patroni_port }}
  authentication:
    username: {{ patroni_username }}
    password: {{ credentials.patroni.patroni_rest_password }}

bootstrap:
  dcs:
    ttl: 30
    loop_wait: 10
    retry_timeout: 10
    maximum_lag_on_failover: 1048576 # 1 megabyte in bytes
    synchronous_mode: true
    postgresql:
      use_pg_rewind: true
      use_slots: true
      parameters:
        wal_level: replica
        hot_standby: "on"
        max_wal_senders: {{ pg_max_wal_senders }}
        wal_keep_segments: 32
        max_replication_slots: 32
        #wal_log_hints: "on" # это нужно, чтобы работал pg_rewind
        #archive_mode: "on"
        #archive_timeout: 1800s
        #archive_command: mkdir -p ../wal_archive && test ! -f ../wal_archive/%f && cp %p ../wal_archive/%f
        #recovery_conf:
          #restore_command: cp ../wal_archive/%f %p
  # some desired options for 'initdb'
  initdb:  # Note: It needs to be a list (some options need values, others are switches)
    - encoding: UTF8
    - lc-collate: en_US.UTF-8
    - lc-ctype: en_US.UTF-8
  users:
    #dba:
    #  password: secret
    # options:
    #    - createrole
    #    - createdb
    {{ replica_user_name }}:
      password: {{ credentials.admins[replica_user_name].password }}
      options:
        - replication
  pg_hba:  # Add following lines to pg_hba.conf after running 'initdb'
    - local    all                   all                                       peer
  # IPv4 local connections:
    - host     all                   all                  127.0.0.1/32         md5
  # IPv6 local connections:
    - host     all                   all                    ::1/128            md5
  # IPv4 Для безграничного подключения пользователей к своим базам
{% for item in credentials.users %}
    - host   {{ item }}       {{ item }}                   0.0.0.0/0           md5
{% endfor %}
  # Для работы pg_rewind
    - host     all                   all               {{ local_network }}     md5
  # Для работы утилиты pg_basebackup и репликации
    - host  replication    {{ replica_user_name }}     {{ local_network }}     md5
    - local   replication     all                                              peer
    - host    replication     all             127.0.0.1/32                     md5
    - host    replication     all             ::1/128                          md5

postgresql:
  listen: '0.0.0.0:{{ pg_port }}'
  connect_address: '{{ ansible_default_ipv4.address }}:{{ pg_port }}'
  data_dir: '/var/lib/postgresql/{{ pg_version }}/main'
  config_dir: '/etc/postgresql/{{ pg_version }}/main'
  bin_dir: '/usr/lib/postgresql/{{ pg_version }}/bin'
  authentication:
    replication:
      username: {{ replica_user_name }}
      password: {{ credentials.admins[pg_user].password }}
      network:  {{ local_network }}
    superuser:
      username: {{ pg_user }}
      password: {{ credentials.admins[pg_user].password }}
    pg_rewind:
      username: {{ pg_user }}
      password: {{ credentials.admins[pg_user].password }}
    #admin:
    #  username: admin
    #  password: { patroni_postgres_password }
  parameters:
    # Fully qualified kerberos ticket file for the running user
    # same as KRB5CCNAME used by the GSS
    unix_socket_directories: '{{ pg_unix_socket_directories }}'
  # restore: /opt/patroni/patroni/scripts/restore.py

{% if role == 'master' %}
tags:
  nofailover: false
  noloadbalance: false
  clonefrom: false
  #nosync: false
{% elif role == 'slave' %}
tags:
  nofailover: false
  noloadbalance: false
  clonefrom: false
  #replicatefrom: {{ master_host_name }}
{% endif %}
