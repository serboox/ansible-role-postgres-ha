---
- name: Create new databases
  become: true
  become_user: "{{ pg_user }}"
  postgresql_db:
    name: "{{ item.value.database }}"
  with_dict: "{{ credentials.users }}"
  when: (patroni_status.json.role is defined and patroni_status.json.role == "master") or
      (patroni_status.json.role is not defined and role == "master")

- name: Set postgres password with no expire date
  become: true
  become_user: "{{ pg_user }}"
  postgresql_user:
    name: "{{ pg_user }}"
    password: "{{ credentials.admins[pg_user].password }}"
    expires: infinity
  when: (patroni_status.json.role is defined and patroni_status.json.role == "master") or
      (patroni_status.json.role is not defined and role == "master")

- name: Create replication user
  become: true
  become_user: "{{ pg_user }}"
  postgresql_user:
    name: "{{ replica_user_name }}"
    password: "{{ credentials.admins[replica_user_name].password }}"
    role_attr_flags: REPLICATION
  when: (patroni_status.json.role is defined and patroni_status.json.role == "master") or
      (patroni_status.json.role is not defined and role == "master")

- name: Connect database, create users
  become: true
  become_user: "{{ pg_user }}"
  postgresql_user:
    name: "{{ item.key }}"
    password:  "{{ item.value.password }}"
    expires: infinity
    role_attr_flags: CREATEDB,NOSUPERUSER,NOREPLICATION
  with_dict: "{{ credentials.users }}"
  when: (patroni_status.json.role is defined and patroni_status.json.role == "master") or
      (patroni_status.json.role is not defined and role == "master")

- name: Restart PostgreSQL
  service:
    name: postgresql
    state: restarted
  when: (patroni_status.json.role is defined and patroni_status.json.role == "master") or
      (patroni_status.json.role is not defined and role == "master")

# https://docs.ansible.com/ansible/latest/modules/postgresql_privs_module.html?highlight=postgres
#- name: Grant all privileges
#  become: true
#  become_user: "{{ pg_user }}"
#  postgresql_privs:
#    db: "{{ item.key }}"
#    privs: ALL
#    type: database
#    role: "{{ item.key }}"
#  #when: item.key != pg_user
#  with_dict: "{{ credentials.users }}"
#    when: (patroni_status.json.role is defined and patroni_status.json.role == "master") or
#      (patroni_status.json.role is not defined and role == "master")
